import mlreportgen.dom.*;

% simulates a bunch of simulations of different STs:
% 6 different values (Standard + 5 APD-based); 10 seconds simulation, 10-100km

% p = gcp('nocreate');
% if (isempty(p))
%     parpool(4);
% end

% tests: 

%[output]=simulateNet(9, 30, 2, 0, 0, 10);
simTime = 0.; % in seconds
numSims = 30; % number of simulations we run and average
numDevs = 2;
numDists = 10;
numSTVals = 6;
dataRate = 1;
linkLens = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]; % in kms!
[totalLink1Thpts, totalLink1Goodpts, totalLink1CollPer] = initCommulativeMetricsDSs(numDists, numSTVals, numSims);
[totalLink2Thpts, totalLink2Goodpts, totalLink2CollPer] = initCommulativeMetricsDSs(numDists, numSTVals, numSims);

% DSs for future display of the metrics of the links:
link1InfoStandardST = cell(numDists, 1);
link2InfoStandardST = cell(numDists, 1);
link1Info2APDST = cell(numDists, 1);
link2Info2APDST = cell(numDists, 1);
link1Info3APDST = cell(numDists, 1);
link2Info3APDST = cell(numDists, 1);
link1InfoAPDST = cell(numDists, 1);
link2InfoAPDST = cell(numDists, 1);
link1InfoHalfAPDST = cell(numDists, 1);
link2InfoHalfAPDST = cell(numDists, 1);
link1InfoQrtAPDST = cell(numDists, 1);
link2InfoQrtAPDST = cell(numDists, 1);

% make directories to save the results:
t = datetime('now');
t = datestr(t);
t = strrep(t,':','-');
experimentResultsPath = ['Results\Experiment_Various_ST_Values_Bunch_1460B_packets_', int2str(dataRate), '_Mbps_data_rate', int2str(numSims), '_Simulations_', int2str(numDevs/2), '_pTp_Links_', int2str(simTime), '_secondes_simulation_', t];
mkdir(experimentResultsPath); % for this experiment

% output arrays
outputStandard = cell(numDists, 1);
output2APD = cell(numDists, 1);
output3APD = cell(numDists, 1);
outputAPD = cell(numDists, 1);
outputHalfAPD = cell(numDists, 1);
outputQrtAPD = cell(numDists, 1);

for k=1:numSims
    for h=1:numDists
    %tic
    %parfor h=1:numDists
      %dists = getLinksLenfor4Devs(h); % in KMs
      dists = h*[0, 10; 10, 0]; 
      %dists = getLinksLenfor6Devs(h); % in KMs
      ST = 10^-5+calcSTfromNetAPD(dists, 1); % 1 APD !
      disp(['Length of tested link: ', int2str(10*h)]);

      disp('Standard');
      % Standard ST experiment
      resPath = 'lala'; % not used, dummy!
      %mkdir(resPath);
      outputStandard{h} = simulateNet(9*10^-6, simTime, numDevs, 0, 0, h, dataRate, resPath); % the last parameter is dataRate in Mbps!
      link1InfoStandardST{h} = outputStandard{h}.linksRes{1};
      link2InfoStandardST{h} = outputStandard{h}.linksRes{2};

      disp('2APD');
      output2APD{h} = simulateNet(2*ST, simTime, numDevs, 0, 0, h, dataRate, resPath);
      link1Info2APDST{h} = output2APD{h}.linksRes{1};
      link2Info2APDST{h} = output2APD{h}.linksRes{2};

      disp('3APD');
      output3APD{h} = simulateNet(3*ST, simTime, numDevs, 0, 0, h, dataRate, resPath);
      link1Info3APDST{h} = output3APD{h}.linksRes{1};
      link2Info3APDST{h} = output3APD{h}.linksRes{2};

      disp('APD');
      outputAPD{h} = simulateNet(ST, simTime, numDevs, 0, 0, h, dataRate, resPath);
      link1InfoAPDST{h} = outputAPD{h}.linksRes{1};
      link2InfoAPDST{h} = outputAPD{h}.linksRes{2};

      disp('0.5APD');
      outputHalfAPD{h} = simulateNet(0.5*ST, simTime, numDevs, 0, 0, h, dataRate, resPath);
      link1InfoHalfAPDST{h} = outputHalfAPD{h}.linksRes{1};
      link2InfoHalfAPDST{h} = outputHalfAPD{h}.linksRes{2};

      disp('0.25APD');
      outputQrtAPD{h} = simulateNet(0.25*ST, simTime, numDevs, 0, 0, h, dataRate, resPath);
      link1InfoQrtAPDST{h} = outputQrtAPD{h}.linksRes{1};
      link2InfoQrtAPDST{h} = outputQrtAPD{h}.linksRes{2};

    end
    
    linkInfoStandardST{1} = link1InfoStandardST;
    linkInfoStandardST{2} = link2InfoStandardST;

    linkInfo2APDST{1} = link1Info2APDST;
    linkInfo2APDST{2} = link2Info2APDST;

    linkInfo3APDST{1} = link1Info3APDST;
    linkInfo3APDST{2} = link2Info3APDST;

    linkInfoAPDST{1} = link1InfoAPDST;
    linkInfoAPDST{2} = link2InfoAPDST;

    linkInfoHalfAPDST{1} = link1InfoHalfAPDST;
    linkInfoHalfAPDST{2} = link2InfoHalfAPDST;

    linkInfoQrtAPDST{1} = link1InfoQrtAPDST;
    linkInfoQrtAPDST{2} = link2InfoQrtAPDST;
    
    % for link 1:
    [linkThpts, linkGoodpts, linkCollPer] = calcLinkMetricsDifferentSTs(linkInfoStandardST{1}, linkInfo3APDST{1}, linkInfo2APDST{1}, linkInfoAPDST{1}, linkInfoHalfAPDST{1}, linkInfoQrtAPDST{1}, simTime, numSTVals, numDists);
    [totalLink1Thpts, totalLink1Goodpts, totalLink1CollPer] = addLinkInfoRes(totalLink1Thpts, totalLink1Goodpts, totalLink1CollPer, linkThpts, linkGoodpts, linkCollPer, k, numSTVals); % add the results to the commulative results - for averaging later
    
    % for link 2:
    [linkThpts, linkGoodpts, linkCollPer] = calcLinkMetricsDifferentSTs(linkInfoStandardST{2}, linkInfo3APDST{2}, linkInfo2APDST{2}, linkInfoAPDST{2}, linkInfoHalfAPDST{2}, linkInfoQrtAPDST{2}, simTime, numSTVals, numDists);
    [totalLink2Thpts, totalLink2Goodpts, totalLink2CollPer] = addLinkInfoRes(totalLink2Thpts, totalLink2Goodpts, totalLink2CollPer, linkThpts, linkGoodpts, linkCollPer, k, numSTVals); % add the results to the commulative results - for averaging later
    
    save([experimentResultsPath, '\output_', int2str(k), '.mat']);

end
%toc

setUpTitle = [int2str(numDevs), ' point to point link, 1460B packets, ', int2str(simTime), ' seconds simulation'];

%tic
% for link 1:
resultsPath = [experimentResultsPath, '\Link_', int2str(1)];
mkdir(resultsPath);
[totalLink1ThptsAVG, totalLink1GoodptsAVG, totalLink1CollPerAVG] = calcAvg(totalLink1Thpts, totalLink1Goodpts, totalLink1CollPer, numSTVals, numDists);
plotLinkMetricsForDifferentSTsAvg(totalLink1ThptsAVG, totalLink1GoodptsAVG, totalLink1CollPerAVG, linkLens, resultsPath, [setUpTitle, ' - Mean of ', int2str(numSims), ' simulations'], dataRate);
[totalLink1ThptsSTDEV, totalLink1GoodptsSTDEV, totalLink1CollPerSTDEV] = calcStandardDev(totalLink1Thpts, totalLink1Goodpts, totalLink1CollPer, numSTVals, numDists);
plotLinkMetricsForDifferentSTsStdDev(totalLink1ThptsSTDEV, totalLink1GoodptsSTDEV, totalLink1CollPerSTDEV, linkLens, resultsPath, [setUpTitle, ' - Standard deviation of ', int2str(numSims), ' simulations']);

% for link 2:
resultsPath = [experimentResultsPath, '\Link_', int2str(2)];
mkdir(resultsPath);
[totalLink2ThptsAVG, totalLink2GoodptsAVG, totalLink2CollPerAVG] = calcAvg(totalLink2Thpts, totalLink2Goodpts, totalLink2CollPer, numSTVals, numDists);
plotLinkMetricsForDifferentSTsAvg(totalLink2ThptsAVG, totalLink2GoodptsAVG, totalLink2CollPerAVG, linkLens, resultsPath, [setUpTitle, ' - Mean of ', int2str(numSims), ' simulations'], dataRate);
[totalLink2ThptsSTDEV, totalLink2GoodptsSTDEV, totalLink2CollPerSTDEV] = calcStandardDev(totalLink2Thpts, totalLink2Goodpts, totalLink2CollPer, numSTVals, numDists);
plotLinkMetricsForDifferentSTsStdDev(totalLink2ThptsSTDEV, totalLink2GoodptsSTDEV, totalLink2CollPerSTDEV, linkLens, resultsPath, [setUpTitle, ' - Standard deviation of ', int2str(numSims), ' simulations']);


%toc

save([experimentResultsPath, '\output.mat']);
